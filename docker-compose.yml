services:
  web:
    build: .
    command: uvicorn app.main:app --host 0.0.0.0 --port ${WEB_PORT} --reload
    volumes:
      - .:/app
      - ./poetry.lock:/app/poetry.lock:rw
    ports:
      - ${WEB_PORT}:${WEB_PORT}
    env_file:
      - .env
    depends_on:
      # - postgres
      - redis
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://0.0.0.0:${WEB_PORT}/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  celery:
    build: .
    command: celery -A app.celery worker --loglevel=debug
    volumes:
      - .:/app
      - ./poetry.lock:/app/poetry.lock:rw
    env_file:
      - .env
    depends_on:
      - redis
      # - postgres

  redis:
    image: redis:7.2-alpine
    command: redis-server --maxmemory ${REDIS_MAX_MEMORY} --maxmemory-policy ${REDIS_MAX_MEMORY_POLICY}
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  flower:
    build: .
    command: celery -A app.celery flower --port=${FLOWER_PORT}
    volumes:
      - .:/app
    ports:
      - ${FLOWER_PORT}:${FLOWER_PORT}
    env_file:
      - .env
    depends_on:
      - redis
      - celery

  # postgres:
  #   image: postgres:13.13
  #   environment:
  #     - .env
  #   ports:
  #     - ${POSTGRES_PORT}:${POSTGRES_PORT}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=${REDIS_COMMANDER_USER}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD}
      - REDIS_COMMANDER_AUTH_TTL=${REDIS_COMMANDER_AUTH_TTL}
    ports:
      - "${REDIS_COMMANDER_PORT}:8081"
    depends_on:
      redis:
        condition: service_healthy

volumes:
  # postgres_data:
  redis_data:
